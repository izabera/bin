#!/bin/bash

# rrlwrap
# it uses read -e to access readline's features:
# - history expansion
# - history completion
# - line editing like a pro

# options:
# -o vi / -o emacs    enable vi/emacs editing mode
# -v                  print version
# -h                  print help
# -H                  enable history expansion
# -p                  set prompt

# ~/.rrlwraprc is read to get the default options

# tested in bash 4.3, should work in older versions too (from 4.0, hopefully)

usage () { echo "usage: rrlwrap [-o emacs|vi] [-vhH] [-p prompt] prog [args...]"; }

hist=false

[[ -r ~/.rrlwraprc ]] && source ~/.rrlwraprc

while getopts :hvo:Hp: opt; do
  case $opt in
    h)
      usage; exit ;;
    v)
      echo "rrlwrap"
      echo "version 0.1"
      echo "by izabera" 
      echo "this code is public domain"
      exit
      ;;
    o)
      if [[ $OPTARG = emacs || $OPTARG = vi ]]; then
        set -o "$OPTARG"
      else
        echo "Invalid parameter: $OPTARG" >&2
        exit 1
      fi
      ;;
    p)
      prompt=$OPTARG
      # TODO: find a decent way
      prompt=${prompt//'\['/$'\1'} prompt=${prompt//'\]'/$'\2'}
      ;;
    H)
      hist=true ;;
    :) # smiley option :)
      echo "Option -$OPTARG needs a parameter" >&2
      exit 1
      ;;
    *) echo "Unknown option: -$OPTARG" >&2
      exit 1
  esac
done

shift "$((OPTIND - 1))"
if (( ! $# )); then
  usage >&2
  exit 1
fi

# workaround so that pressing backspace won't delete the program's prompt
[[ $prompt ]] && prompt_is_set=true || prompt_is_set=false
prompt+=$'\3'
{
  bind 'tab:dabbrev-expand'         # i'm going to call this "menu-complete for history"
  bind 'set show-all-if-ambiguous on'
  bind 'set menu-complete-display-prefix on'
  bind 'set print-completions-horizontally on'
  bind 'set bell-style none'
  bind 'set completion-ignore-case on'
} 2> /dev/null                      # bind prints some stupid error message even if it succeeds


{
  echo "$BASHPID"
  while read -re -p "$prompt"; do
                                    # expand history
    if ! "$hist" || ! history -p -- "$REPLY" 2>/dev/null; then
      printf "%s\n" "$REPLY"        # if expansion fails, just print it
    fi

    if [[ $REPLY != "$old" ]]; then # HISTCONTROL=ignoredups
      history -s -- "$REPLY"        # add to history
    fi

    old=$REPLY

  done
} | {
  read pid
  if type -P "$1" >/dev/null; then
    "$@"
    exit=$?
  else
    printf '%s: command not found\n' "$1"
    exit=127
  fi

  kill -TERM "$pid" 2>/dev/null

  # TODO: this sucks 
  "$prompt_is_set" && echo

  exit "$exit"
}
